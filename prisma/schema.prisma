datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  authenticators Authenticator[]

  transcriptions Transcription[] // ðŸ‘ˆ Relazione 1:N con le transcriptions

  // ---> CAMPI PER ABBONAMENTI E LIMITI <---
  subscriptionStatus String    @default("free") // Es: "free", "pro", "business"
  stripeCustomerId   String?   @unique          // ID cliente Stripe
  stripeSubscriptionId String? @unique
  limitResetDate     DateTime? @map("limit_reset_date") // Data ultimo reset limite mensile

  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Analysis {
  id            String    @id @default(cuid()) 
  transcriptId  String
  content       Json
  createdAt     DateTime  @default(now())

  transcript Transcription @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
}

model ChatHistory {
  id            String    @id @default(cuid()) 
  transcriptId  String
  chatId        String
  messages      String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt

  transcript Transcription @relation(fields: [transcriptId], references: [id], onDelete: Cascade)
}

enum FileType {
  testo
  audio
  video
}

model Transcription {
  id                 String    @id @default(cuid()) 
  title              String
  transcript         String
  cleanedTranscript  String
  fileType           FileType
  userId             String
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @default(now()) @updatedAt

  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses     Analysis[]
  chatHistories ChatHistory[]
}